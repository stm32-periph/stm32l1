/**
  @page TIM9_ETR_LSE TIM9 LSE ETR example
  
  @verbatim
  ******************** (C) COPYRIGHT 2010 STMicroelectronics *******************
  * @file    TIM/TIM9_ETR_LSE/readme.txt 
  * @author  MCD Application Team
  * @version V1.0.0
  * @date    31-December-2010
  * @brief   Description of the TIM9 LSE ETR example.
  ******************************************************************************
  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  ******************************************************************************
   @endverbatim

@par Example Description 


This example explains how to configure TIM9 time base that works completely 
independently of the system clock. This allows the scheduling of tasks without
having to take into account the processor state (the processor may be stopped 
or executing at low, medium or full speed).
For this purpose, the LSE clock is internally redirected to the TIM9 ETR input.

Moreover, this example shows how to configure the TIM9 channel 1 in PWM 
(Pulse Width Modulation) mode and to be clocked with the LSE clock.
The TIMxCLK frequency is set to the LSE frequency 32.768 KHz, the Prescaler is 0
so the TIM9 counter clock is 32.768 KHz.

The TIM9 ARR register value is equal to 0x1F, so an update event is generated
each (0x1F + 1) / 32.768KHz ~ 1 ms

The TIM9 ARR register value is equal to 0x1F, so the TIM9 Channel 1 generates a 
PWM signal with a frequency equal to 1KHz

The TIM9 CCR1 register value is equal to 0x8, so the TIM9 Channel 1 generates a 
PWM signal with a duty cycle equal to 25%:
TIM9 Channel1 duty cycle = (TIM9_CCR1/ TIM9_ARR + 1)* 100 = 25%

The PWM waveform can be displayed using an oscilloscope.

@par Directory contents 

  - TIM/TIM9_ETR_LSE/stm32l1xx_conf.h     Library Configuration file
  - TIM/TIM9_ETR_LSE/stm32l1xx_it.c       Interrupt handlers
  - TIM/TIM9_ETR_LSE/stm32l1xx_it.h       Header for stm32l1xx_it.c
  - TIM/TIM9_ETR_LSE/main.c               Main program
  - TIM/TIM9_ETR_LSE/system_stm32l1xx.c   STM32L1xx system source file
  
@note The "system_stm32l1xx.c" is generated by an automatic clock configuration 
      system and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32L1xx_Clock_Configuration_V1.0.0.xls" 
      provided with the AN3309 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>
         
@par Hardware and Software environment

  - This example runs on STM32L1xx Ultra Low Power Medium-Density Devices.
  
  - This example has been tested with STMicroelectronics STM32L152-EVAL (STM32L1xx 
    Ultra Low Power Medium-Density) evaluation board and can be easily tailored 
    to any other supported device and development board.

  - STM32L152-EVAL Set-up
    - Connect the PA.02 pin to the scope.

@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32L1xx_StdPeriph_Template
 - Open your preferred toolchain 
 - Rebuild all files and load your image into target memory
 - Run the example

@note
 - Ultra Low Power Medium-density devices are STM32L151xx and STM32L152xx 
   microcontrollers where the Flash memory density ranges between 64 and 128 Kbytes.
   
 * <h3><center>&copy; COPYRIGHT 2010 STMicroelectronics</center></h3>
 */
