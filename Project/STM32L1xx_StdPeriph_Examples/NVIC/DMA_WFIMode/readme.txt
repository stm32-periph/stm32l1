/**
  @page NVIC_DMA_WFIMode NVIC DMA in WFI mode example
  
  @verbatim
  ******************** (C) COPYRIGHT 2010 STMicroelectronics *******************
  * @file    NVIC/NVIC_DMA_WFIMode/readme.txt 
  * @author  MCD Application Team
  * @version V1.0.0
  * @date    31-December-2010
  * @brief   Description of the NVIC DMA in WFI mode example.
  ******************************************************************************
  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  ******************************************************************************
   @endverbatim

@par Example Description 

This example shows how to enter the system to WFI mode with DMA transfer enabled
and wake-up from this mode by the DMA End of Transfer interrupt.

In the associated software, the system clock is set to 32 MHz, the DMA1 Channel6 
is configured to transfer 10 data from the EVAL COM1 USART data register to a 
predefined buffer, DST_Buffer, and to generate an interrupt at the end of the transfer.

The EVAL COM1 USART receives data from Hyperterminal.
A LED1 is toggled with a frequency depending on the system clock, this is used 
to indicate whether the MCU is in WFI or RUN mode. 

Pressing key push button (generates rising edge on EXTI0) will put the core in
the WFI mode, causing the led pin to stop toggling.
To wake-up from WFI mode you have to send the sequence (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
from the Hyperterminal to the EVAL COM1 USART. These bytes will be transferred 
by the DMA from the EVAL COM1 receive data register to the predefined buffer, 
then generates an interrupt which exits the system from WFI mode. 
The LED1 restarts toggling and a LED2 will toggle if the buffer is correctly 
received else a LED3 is toggled.

@par Directory contents 

  - NVIC/DMA_WFIMode/stm32l1xx_conf.h    Library Configuration file
  - NVIC/DMA_WFIMode/stm32l1xx_it.c      Interrupt handlers
  - NVIC/DMA_WFIMode/stm32l1xx_it.h      Interrupt handlers header file
  - NVIC/DMA_WFIMode/main.c              Main program
  - NVIC/DMA_WFIMode/system_stm32l1xx.c  STM32L1xx system source file
  
@note The "system_stm32l1xx.c" is generated by an automatic clock configuration 
      system and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32L1xx_Clock_Configuration_V1.0.0.xls" 
      provided with the AN3309 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>
         
@par Hardware and Software environment

  - This example runs on STM32L1xx Ultra Low Power Medium-Density Devices.
  
  - This example has been tested with STMicroelectronics STM32L152-EVAL (STM32L1xx 
    Ultra Low Power Medium-Density) evaluation board and can be easily tailored 
    to any other supported device and development board.

  - STM32L152-EVAL Set-up
    - Use LED1, LED2, LED3 and LED4 leds connected respectively to PD.00, PD.01,
      PD.04 and PD.05 pins
    - The USART2 signals (Rx, Tx) must be connected to a DB9 connector using a RS232
      transceiver.
    - Connect a null-modem female/female RS232 cable between the DB9 connector, 
      CN2 on STM32L152-EVAL board, and PC serial port.   
    - Hyperterminal configuration:
       - Word Length = 8 Bits
       - One Stop Bit
       - No parity
       - BaudRate = 115200 baud
       - flow control: None   
    - Use the Key push-button connected to pin PA0 (EXTI Line0).
    - Make sure that JP5 is on position 2<->3.
      
@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32L1xx_StdPeriph_Template
 - Open your preferred toolchain 
 - Rebuild all files and load your image into target memory
 - Run the example

@note
- Ultra Low Power Medium-density devices are STM32L151xx and STM32L152xx 
  microcontrollers where the Flash memory density ranges between 64 and 128 Kbytes.
    
 * <h3><center>&copy; COPYRIGHT 2010 STMicroelectronics</center></h3>
 */
