/**
  @page NVIC_VectorTable_Relocation NVIC Vector Table Relocation example
  
  @verbatim
  ******************** (C) COPYRIGHT 2010 STMicroelectronics *******************
  * @file    NVIC/VectorTable_Relocation/readme.txt 
  * @author  MCD Application Team
  * @version V1.0.0
  * @date    31-December-2010
  * @brief   Description of the NVIC Vector Table Relocation example.
  ******************************************************************************
  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  ******************************************************************************
   @endverbatim

@par Example Description 

This example describes how to set the CortexM3 vector table in a specific 
address other than default using the NVIC_SetVectorTable function from the 
misc.h/.c driver.

This can be used to build program which will be loaded into Flash memory by an
application previously programmed from the Flash memory base address. 
Such application can be In-Application Programming (IAP, through USART) or
Device Firmware Upgrade (DFU, through USB).

These applications are available for download from the ST microcontrollers 
website: <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>/stm32l

The associated program implements a "Delay" function based on SysTick end of count
interrupt, and toggles four leds with timing defined by the "Delay" function.

When using the IAP or DFU to load your porgram, the vector table must be
relocated at address 0x08003000.


@par Directory contents 

  - NVIC/VectorTable_Relocation/stm32l1xx_conf.h    Library Configuration file
  - NVIC/VectorTable_Relocation/stm32l1xx_it.c      Interrupt handlers
  - NVIC/VectorTable_Relocation/stm32l1xx_it.h      Interrupt handlers header file
  - NVIC/VectorTable_Relocation/main.c              Main program
  - NVIC/VectorTable_Relocation/system_stm32l1xx.c  STM32L1xx system source file

@note The "system_stm32l1xx.c" is generated by an automatic clock configuration 
      system and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32L1xx_Clock_Configuration_V1.0.0.xls" 
      provided with the AN3309 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>

@par Hardware and Software environment

  - This example runs on STM32L1xx Ultra Low Power Medium-Density Devices.
  
  - This example has been tested with STMicroelectronics STM32L152-EVAL (STM32L1xx 
    Ultra Low Power Medium-Density) evaluation board and can be easily tailored 
    to any other supported device and development board.

  - STM32L152-EVAL Set-up
    - Use LD1, LD2, LD3 and LD4 leds connected respectively to PD.00, PD.01, 
      PD.04 and PD.05 pins

@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32L1xx_StdPeriph_Template
 - Open your preferred toolchain and setup your project configuration as follows
<ul>
    <li> MDK-ARM
         - In the project option menu, select 'Target' window and enter 0x08003000 
           as IROM start address
         - In the project option menu, select 'Linker' window and enter 0x08003000 
           as R/O base address

    <li> EWARM
         - Use "stm32l1xx_flash_offset.icf" as linker file

    <li> RIDE          
         - In the Application options -> script menu, set "Use Default Script File" 
           to "No" and use "stm32l1xx_flash_offset.ld" as Script File. 
           This linker is configured for Ultra Low Power Medium-density devices. 
           To use it with other STM32 devices, this linker should be updated.
           
    <li> HiTOP
         - From linker\HiTOP\[target], copy the "link_offset" and "stm32l1xx_md_offset.lsl"
           to "Settings" folder.
         - In project -> settings -> project -> tool settings ->linker 
             use "link_offset.lnk" as linker file. 
         - Add the "setstack.asm" to the workspace. 

    <li> TrueSTUDIO 
         - In the project properties window, select C/C++ Build->settings node then 
           the C Linker->General node and use "stm32l1xx_flash_offset.ld" as Script File.
           This linker is configured for Ultra Low Power Medium-density devices. 
           To use it with other STM32 devices, this linker should be updated. 
          
</ul> 

 - Rebuild all files and load your image into target memory
 - Run the example


@note
- Ultra Low Power Medium-density devices are STM32L151xx and STM32L152xx 
  microcontrollers where the Flash memory density ranges between 64 and 128 Kbytes.
    
 * <h3><center>&copy; COPYRIGHT 2010 STMicroelectronics</center></h3>
 */
